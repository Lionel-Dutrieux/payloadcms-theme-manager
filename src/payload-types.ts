/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    theme: Theme;
  };
  globalsSelect: {
    theme: ThemeSelect<false> | ThemeSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "theme".
 */
export interface Theme {
  id: number;
  settings?: {
    enabled?: boolean | null;
    /**
     * Select a predefined theme or create a custom one
     */
    usePreset?: ('custom' | 'bardahl' | 'luxinnovation' | 'computerland') | null;
  };
  /**
   * Configure colors for both light and dark modes
   */
  colors?: {
    lightPrimary?: string | null;
    lightPrimaryForeground?: string | null;
    lightSecondary?: string | null;
    lightSecondaryForeground?: string | null;
    lightMuted?: string | null;
    lightMutedForeground?: string | null;
    lightAccent?: string | null;
    lightAccentForeground?: string | null;
    lightDestructive?: string | null;
    lightDestructiveForeground?: string | null;
    lightBorder?: string | null;
    lightInput?: string | null;
    lightRing?: string | null;
    lightBackground?: string | null;
    lightForeground?: string | null;
    lightCard?: string | null;
    lightCardForeground?: string | null;
    lightPopover?: string | null;
    lightPopoverForeground?: string | null;
    lightChart1?: string | null;
    lightChart2?: string | null;
    lightChart3?: string | null;
    lightChart4?: string | null;
    lightChart5?: string | null;
    lightSidebar?: string | null;
    lightSidebarForeground?: string | null;
    lightSidebarPrimary?: string | null;
    lightSidebarPrimaryForeground?: string | null;
    lightSidebarAccent?: string | null;
    lightSidebarAccentForeground?: string | null;
    lightSidebarBorder?: string | null;
    darkPrimary?: string | null;
    darkPrimaryForeground?: string | null;
    darkSecondary?: string | null;
    darkSecondaryForeground?: string | null;
    darkMuted?: string | null;
    darkMutedForeground?: string | null;
    darkAccent?: string | null;
    darkAccentForeground?: string | null;
    darkDestructive?: string | null;
    darkDestructiveForeground?: string | null;
    darkBorder?: string | null;
    darkInput?: string | null;
    darkRing?: string | null;
    darkBackground?: string | null;
    darkForeground?: string | null;
    darkCard?: string | null;
    darkCardForeground?: string | null;
    darkPopover?: string | null;
    darkPopoverForeground?: string | null;
    darkChart1?: string | null;
    darkChart2?: string | null;
    darkChart3?: string | null;
    darkChart4?: string | null;
    darkChart5?: string | null;
    darkSidebar?: string | null;
    darkSidebarForeground?: string | null;
    darkSidebarPrimary?: string | null;
    darkSidebarPrimaryForeground?: string | null;
    darkSidebarAccent?: string | null;
    darkSidebarAccentForeground?: string | null;
    darkSidebarBorder?: string | null;
  };
  sizes?: {
    radius?: string | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "theme_select".
 */
export interface ThemeSelect<T extends boolean = true> {
  settings?:
    | T
    | {
        enabled?: T;
        usePreset?: T;
      };
  colors?:
    | T
    | {
        lightPrimary?: T;
        lightPrimaryForeground?: T;
        lightSecondary?: T;
        lightSecondaryForeground?: T;
        lightMuted?: T;
        lightMutedForeground?: T;
        lightAccent?: T;
        lightAccentForeground?: T;
        lightDestructive?: T;
        lightDestructiveForeground?: T;
        lightBorder?: T;
        lightInput?: T;
        lightRing?: T;
        lightBackground?: T;
        lightForeground?: T;
        lightCard?: T;
        lightCardForeground?: T;
        lightPopover?: T;
        lightPopoverForeground?: T;
        lightChart1?: T;
        lightChart2?: T;
        lightChart3?: T;
        lightChart4?: T;
        lightChart5?: T;
        lightSidebar?: T;
        lightSidebarForeground?: T;
        lightSidebarPrimary?: T;
        lightSidebarPrimaryForeground?: T;
        lightSidebarAccent?: T;
        lightSidebarAccentForeground?: T;
        lightSidebarBorder?: T;
        darkPrimary?: T;
        darkPrimaryForeground?: T;
        darkSecondary?: T;
        darkSecondaryForeground?: T;
        darkMuted?: T;
        darkMutedForeground?: T;
        darkAccent?: T;
        darkAccentForeground?: T;
        darkDestructive?: T;
        darkDestructiveForeground?: T;
        darkBorder?: T;
        darkInput?: T;
        darkRing?: T;
        darkBackground?: T;
        darkForeground?: T;
        darkCard?: T;
        darkCardForeground?: T;
        darkPopover?: T;
        darkPopoverForeground?: T;
        darkChart1?: T;
        darkChart2?: T;
        darkChart3?: T;
        darkChart4?: T;
        darkChart5?: T;
        darkSidebar?: T;
        darkSidebarForeground?: T;
        darkSidebarPrimary?: T;
        darkSidebarPrimaryForeground?: T;
        darkSidebarAccent?: T;
        darkSidebarAccentForeground?: T;
        darkSidebarBorder?: T;
      };
  sizes?:
    | T
    | {
        radius?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}